#!/usr/bin/env python
import argparse

from openedx_configuration.lib import *
from openedx_configuration.models.vpc.vpc import Vpc
from openedx_configuration.models.vpc.gateway import Gateway
from openedx_configuration.models.vpc.route_table import RouteTable
from openedx_configuration.models.vpc.subnet import Subnet
from openedx_configuration.models.ec2.security_group import SecurityGroup


DESCRIPTION_SECURITY_GROUP = 'TODO: something smart here'


def _get_all(arguments):
    api_vpc = VPCConnection()
    api_ec2 = EC2Connection()
    environment = arguments.environment
    vpc_name = arguments.vpc_name
    vpc_cidr_block = arguments.vpc_cidr_block
    subnet_cidr_block = arguments.subnet_cidr_block
    vpc = Vpc(environment, vpc_name, api=api_vpc)
    gateway = Gateway(
        environment,
        name='sandbox-internet',
        vpc=vpc,
        api=api_vpc,
    )
    subnet = Subnet(
        environment,
        name='sandbox-public',
        vpc=vpc,
        api=api_vpc,
    )
    security_group = SecurityGroup(
        environment,
        name='public-sandbox-openedx',
        vpc=vpc,
        api=api_ec2,
    )
    route_table = RouteTable(
        environment,
        name='sandbox-route-public',
        subnet=subnet,
        api=api_vpc,
    )
    return (
        vpc,
        gateway,
        subnet,
        security_group,
        route_table,
    )


def describe(arguments):
    items = _get_all(arguments)
    for item in items:
        if item.exists:
            print(item)


def create(arguments):
    dry_run = not arguments.go
    (vpc, gateway, subnet, security_group, route_table) = _get_all(arguments)
    vpc.create(cidr_block=arguments.vpc_cidr_block, dry_run=dry_run)
    gateway.create(dry_run=dry_run)
    subnet.create(cidr_block=arguments.subnet_cidr_block, dry_run=dry_run)
    route_table.create(gateway_id=gateway.id, cidr_block=PUBLIC_CIDR_BLOCK, dry_run=dry_run)
    security_group.create(description=DESCRIPTION_SECURITY_GROUP, dry_run=dry_run)


def destroy(arguments):
    dry_run = not arguments.go
    (vpc, gateway, subnet, security_group, route_table) = _get_all(arguments)
    route_table.destroy(dry_run=dry_run)
    security_group.destroy(dry_run=dry_run)
    subnet.destroy(dry_run=dry_run)
    gateway.destroy(dry_run=dry_run)
    vpc.destroy(dry_run=dry_run)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Whatever, man',
    )
    parser.add_argument(
        '-V',
        '--vpc-cidr-block',
        # help='breath life with a name',
        default='10.4.0.0/16'
    )
    parser.add_argument(
        '-s',
        '--subnet-cidr-block',
        # help='breath life with a name',
        default='10.4.0.0/24'
    )
    parser.add_argument(
        '-a',
        '--action',
        help='create/describe/destroy',
        default='describe'
    )
    parser.add_argument(
        '-n',
        '--vpc-name',
        help='?',
        default=None,
    )
    parser.add_argument(
        '-e',
        '--environment',
        help='?',
        default='sandbox',
    )
    parser.add_argument(
        '-g',
        '--go',
        action='store_true',
        help='?',
        default=False,
    )
    arguments = parser.parse_args()
    return arguments


def main(arguments):
    if not arguments.vpc_name:
        arguments.vpc_name = arguments.environment
    if arguments.action == 'create':
        create(arguments)
    elif arguments.action == 'destroy':
        destroy(arguments)
    else:
        describe(arguments)

if __name__ == '__main__':
    arguments = parse_arguments()
    main(arguments)
