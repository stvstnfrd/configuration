#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Provision an EC2 instance for use as an OpenEdX sandbox
"""
import argparse
import os

from ansible import utils
from ansible import callbacks
from ansible.playbook import PlayBook
from boto.ec2 import EC2Connection


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=__doc__,
    )
    parser.add_argument(
        '-n',
        '--instance-name',
        required=True,
    )
    parser.add_argument(
        '-d',
        '--disk-size',
        default=16,
        help='the disk size in MB(?)'
    )
    parser.add_argument(
        '-t',
        '--terminate',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '-T',
        '--tear-down',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '-c',
        '--create',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '-b',
        '--bootstrap',
        default=False,
        action='store_true',
        help='provision vpc too?',
    )
    parser.add_argument(
        '-l',
        '--list',
        default=True,
        action='store_true',
    )
    parser.add_argument(
        '-s',
        '--start',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '-S',
        '--stop',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '-a',
        '--ami',
        default='ami-b06717d0',
        help='(default=ami-b06717d0, base=ami-2b2f594b)',
    )
    parser.add_argument(
        '-p',
        '--playbook',
        default='~/src/edx/configuration/playbooks/',
    )
    parser.add_argument(
        '-P',
        '--playbook-directory',
        default='~/src/edx/configuration/playbooks/',
    )
    arguments = parser.parse_args()
    arguments.instance_name = "sandbox-instance-{name}".format(
        name=arguments.instance_name,
    )
    return arguments

def get_instance(arguments):
    connection_ec2 = EC2Connection()
    instances = connection_ec2.get_only_instances(
        filters={
            'tag:Name': arguments.instance_name,
            'tag:Deployment': 'sandbox',
        },
    )
    instances = [
        instance
        for instance in instances
        if instance.state != 'terminated'
    ]
    len_instances = len(instances)
    assert len(instances) <= 1
    if len_instances == 1:
        instance = instances[0]
    else:
        instance = None
    return instance


def create_instance(arguments):
    stats = callbacks.AggregateStats()
    callbacks = callbacks.PlaybookCallbacks(
        verbose=utils.VERBOSITY,
    )
    runner_callbacks = callbacks.PlaybookRunnerCallbacks(
        stats,
        verbose=utils.VERBOSITY,
    )
    os.environ['ANSIBLE_CONFIG'] = arguments.playbook_dir
    play = PlayBook(
        playbook=arguments.play,
        callbacks=callbacks,
        runner_callbacks=runner_callbacks,
        stats=stats,
    )
    play.run()
    callbacks.on_stats(play.stats)


def list_instance(arguments):
    instance = get_instance(arguments)
    print(instance.tags)
    name = instance.tags['Name']
    name = name.split('-')[-1]
    dns = name + '-sandbox.class.stanford.edu'
    print('name', name)
    print('id', instance.id)
    print('id', instance.state)
    print('tags', instance.tags)
    print('instance_type', instance.instance_type)
    print('private_ip_address', instance.private_ip_address)
    print('public_dns_name', instance.public_dns_name)
    print('dns', dns)
    return instance


def update_instance(action, arguments):
    instance = get_instance(arguments)
    actionable = getattr(instance, action)
    instance = get_instance(arguments)
    return instance


def bootstrap_vpc(arguments):
    print('TODO: bootstrap vpc')


def tear_down_vpc(arguments):
    print('TODO: tear down vpc')


def main(arguments):
    if arguments.stop:
        update_instance('stop', arguments)
    if arguments.terminate:
        update_instance('terminate', arguments)
        if arguments.tear_down:
            tear_down_vpc(arguments)
    if arguments.create:
        if arguments.bootstrap:
            bootstrap_vpc(arguments)
        create_instance(arguments)
    elif arguments.start:
        update_instance('start',arguments)
    if arguments.list:
        list_instance(arguments)


if __name__ == '__main__':
    arguments = parse_arguments()
    main(arguments)
