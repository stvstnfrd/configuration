#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Provision an EC2 instance for use as an OpenEdX sandbox
"""
import argparse

from openedx_configuration.lib import *
from openedx_configuration.models.ec2.instance import Instance
from openedx_configuration.models.ec2.security_group import SecurityGroup
from openedx_configuration.models.vpc.subnet import Subnet
from openedx_configuration.models.vpc.vpc import Vpc


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=__doc__,
    )
    parser.add_argument(
        '-n',
        '--instance-name',
        required=True,
    )
    parser.add_argument(
        '-e',
        '--environment',
        default='sandbox',
        help='one of [sandbox, stage, lagunita, suclass, cme, etc]',
    )
    parser.add_argument(
        '-r',
        '--role',
        help='one of [sandbox, edxapp, xqueue, certs, etc]',
        default='sandbox',
    )
    parser.add_argument(
        '-d',
        '--disk-size',
        help='what size EBS volume',
        default=16,
    )
    parser.add_argument(
        '-a',
        '--action',
        help='one of [create, describe, destroy]',
        default='describe'
    )
    parser.add_argument(
        '-g',
        '--go',
        action='store_true',
        help='should we actually take action?',
        default=False,
    )
    arguments = parser.parse_args()
    return arguments


if __name__ == '__main__':
    arguments = parse_arguments()
    environment = arguments.environment
    name = arguments.instance_name
    instance = Instance(environment, name)
    api_vpc = VPCConnection()
    api_ec2 = EC2Connection()
    vpc = Vpc(environment)
    subnet = Subnet(
        environment,
        name='sandbox-public',
        vpc=vpc,
        api=api_vpc,
    )
    security_group = SecurityGroup(
        environment,
        name='public-sandbox-openedx',
        vpc=vpc,
        api=api_ec2,
    )
    dry_run = not arguments.go
    if arguments.action == 'create':
        instance.create(
            arguments.role,
            security_group,
            subnet,
            disk_size=arguments.disk_size,
            dry_run=dry_run,
        )
        instance.wait_until_ready()
        print(instance.ip_address)
        print(instance.public_dns_name)
    elif arguments.action == 'destroy':
        instance.destroy(dry_run=dry_run)
    else:
        print(subnet.exists, subnet)
        print(security_group.exists, security_group)
        print(instance.exists, instance)
        print(instance.ip_address)
        print(instance.public_dns_name)
