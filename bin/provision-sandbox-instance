#!/usr/bin/env python
import argparse

from openedx_configuration.lib import *
from openedx_configuration.models.ec2.instance import Instance


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Whatever, man',
    )
    parser.add_argument(
        '-n',
        '--instance-name',
        help='breath life with a name',
        required=True,
    )
    parser.add_argument(
        '-e',
        '--environment',
        help='?',
        default='sandbox',
    )
    parser.add_argument(
        '-r',
        '--role',
        help='?',
        default='sandbox',
    )
    parser.add_argument(
        '-s',
        '--subnet-cidr-block',
        help='?',
        default='10.4.0.0/24',
    )
    parser.add_argument(
        '-V',
        '--vpc-cidr-block',
        help='?',
        default='10.4.0.0/16',
    )
    parser.add_argument(
        '-d',
        '--disk-size',
        help='what size EBS volume',
        default=16,
    )
    parser.add_argument(
        '-a',
        '--action',
        help='create/describe/destroy',
        default='describe'
    )
    arguments = parser.parse_args()
    environment = arguments.environment
    name = arguments.instance_name
    vpc_cidr_block = arguments.vpc_cidr_block
    instance = Instance(environment, name)
    instance.lookup()
    print(instance)
    if arguments.action == 'create':
        vpc = lookup_vpc(
            environment,
            vpc_cidr_block,
        )
        vpc_id = vpc.id
        subnet = lookup_subnet(vpc, environment, generate_name_subnet(vpc), arguments.subnet_cidr_block)
        name_security_group = generate_name_security_group(vpc)
        DESCRIPTION_SECURITY_GROUP = 'Blah blah blah'
        security_group = lookup_security_group(vpc, name_security_group, DESCRIPTION_SECURITY_GROUP)
        instance.create(
            arguments.role,
            security_group.id,
            subnet.id,
            disk_size=arguments.disk_size,
        )
        instance.wait_until_ready()
        print(instance.ip_address)
        print(instance.public_dns_name)
    elif arguments.action == 'destroy':
        instance.destroy()
