#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse

from boto.exception import EC2ResponseError

from openedx_configuration.lib import *


DESCRIPTION_SECURITY_GROUP = 'TODO: something smart here'


def lookup_all_vpcs(arguments):
    connection_vpc = VPCConnection()
    connection_ec2 = EC2Connection()
    if arguments.environment:
        vpcs = [
            Vpc(arguments.environment)
        ]
    else:
        vpcs = Vpc.get_all()
    print(vpcs)
    print('Host *')
    print('    ForwardAgent yes')
    print('    User {username}'.format(username=arguments.username))
    for vpc in vpcs:
        vpc_name = vpc.name
        if vpc_name.endswith('-vpc'):
            vpc_name = vpc_name[:-4]
        print('')
        instances = connection_ec2.get_only_instances(
            filters={
                'vpc-id': vpc.id,
            },
        )
        jumpbox = [
            instance
            for instance in instances
            if instance.tags.get('Name', '').startswith('jumpbox.')
        ]
        if len(jumpbox):
            jumpbox = jumpbox[0]
        for instance in instances:
            name = instance.tags.get('Name', '')
            if not name:
                continue
            if jumpbox and jumpbox.id != instance.id:
                jumpbox_name = 'jump.' + vpc_name
                print('Host ' + name)
                print('    ProxyCommand ssh -W ' + instance.private_ip_address + ':%p ' + jumpbox_name)
            elif jumpbox:
                name = 'jump.' + vpc_name
                print('Host ' + name)
                print('    HostName ' + jumpbox.ip_address)
            else:
                print('Host ' + name)
                print('    HostName ' + instance.ip_address)


def lookup_hosted_zone(name):
    connection_route53 = Route53Connection()
    zone = connection_route53.get_zone(name)
    return zone


def create_hosted_zone(name):
    connection_route53 = Route53Connection()
    name = name + '.'
    zone = connection_route53.create_zone(name)
    return zone


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Whatever, man',
    )
    parser.add_argument(
        '-e',
        '--environment',
        help='?',
        default=None,
    )
    parser.add_argument(
        '-u',
        '--username',
        help='probably your Github username',
        required=True,
    )
    arguments = parser.parse_args()
    print(arguments)
    lookup_all_vpcs(arguments)
