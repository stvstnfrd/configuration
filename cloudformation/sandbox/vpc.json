{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description": "Sandbox Setup",
    "Parameters": {
        "InstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "t2.medium",
            "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
            ,
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation" : {
            "Description" : " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSRegionArch2AMI": {
            "us-west-1": {
                "HVM64": "ami-b06717d0"
            },
            "us-west-2": {
                "HVM64": "ami-2b2f594b"
            }
        },
        "AWSInstanceType2Arch" : {
            "t2.medium": {
                "Arch": "HVM64"
            }
        },
        "SubnetConfig": {
            "VPC": {
                "cidr": "10.4.0.0/16"
            },
            "Subnet": {
                "cidr": "10.4.0.0/24"
            },
            "World": {
                "cidr": "0.0.0.0/0"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "cidr" ] },
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "Subnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Subnet", "cidr" ] },
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox-public"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox-internet"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "RouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox-routes"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "Route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteTable" },
                "DestinationCidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] },
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },
        "NetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox-network-acl"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "InboundHTTPNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] },
                "PortRange" : {"From" : "80", "To" : "80"}
            }
        },
        "InboundSSHNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] },
                "PortRange" : {"From" : "22", "To" : "22"}
            }
        },
        "OutBoundHTTPNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] },
                "PortRange" : {"From" : "80", "To" : "80"}
            }
        },
        "OutBoundHTTPSNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] },
                "PortRange" : {"From" : "443", "To" : "443"}
            }
        },
        "SubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet" },
                "NetworkAclId" : { "Ref" : "NetworkAcl" }
            }
        },
        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "GroupDescription" : "Enable SSH access via port 22",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : {
                            "Ref" : "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "World", "cidr" ] }
                    }
                ],
                "Tags" : [
                    {"Key" : "Name", "Value" : "sandbox-public-webserver"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ]
            }
        },
        "WebServerInstance" : {
            "Type" : "AWS::EC2::Instance",
            "DependsOn" : "AttachGateway",
            "Metadata" : {
                "Comment" : "Install a simple application",
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "httpd": []
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "httpd"    : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true"
                                },
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        { "Ref": "AWS::Region" },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                { "Ref" : "InstanceType" },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName" : { "Ref" : "KeyName" },
                "Tags" : [
                    {"Key" : "Name", "Value" : "jenkins.sandbox"},
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
                ],
                "NetworkInterfaces" : [
                    {
                        "GroupSet": [{ "Ref" : "InstanceSecurityGroup" }],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": { "Ref" : "Subnet" }
                    }
                ],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "apt-get -y install python-setuptools\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                    "cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource WebServerInstance ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "cfn-signal --exit-code ${?} ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource WebServerInstance ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}}
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT1M"
                }
            }
        }
    },
    "Outputs": {
        "URL" : {
            "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["WebServerInstance", "PublicIp"] }]]},
            "Description" : "Newly created application URL"
        }
    }
}
